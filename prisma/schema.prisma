// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Category {
  movie
  series
  anime
}

enum ExternalSource {
  TMDB
  ANILIST
}

enum WatchlistStatus {
  planned
  watching
  completed
}

model User {
  id        String     @id @default(ulid())
  email     String     @unique
  password  String
  role      String     @default("admin")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  reviews   Review[]
  watchlist Watchlist[]
}

model Viewings {
  id             String         @id @default(ulid())
  externalId     String
  externalSource ExternalSource
  title          String
  category       Category
  releaseYear    Int?
  posterUrl      String?
  totalEps       Int?
  createdAt      DateTime       @default(now())

  reviews        Review[]
  watchlist      Watchlist[]

  @@unique([externalSource, externalId])
  @@index([category])
  @@index([createdAt])
}

model Review {
  id              String   @id @default(ulid())
  userId          String
  viewingId       String
  slug            String   @unique
  ratingOverall   Int
  ratingPlot      Int
  ratingCharacter Int
  ratingWorld     Int
  textReview      String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  viewing  Viewings @relation(fields: [viewingId], references: [id])

  @@unique([userId, viewingId])
  @@index([createdAt])
}

model Watchlist {
  id         String          @id @default(ulid())
  userId     String
  viewingId  String
  status     WatchlistStatus
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  viewing  Viewings @relation(fields: [viewingId], references: [id])

  @@unique([userId, viewingId])
  @@index([status, createdAt])
}

